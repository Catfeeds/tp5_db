<?php

namespace app\db\controller;

use app\model\Demo;
use function MongoDB\BSON\toJSON;
use think\Controller;
use think\View;
use think\Db;

class Index extends Controller
{
    /***
     * 空操作方法
     * @param $name
     * @return mixed
     */
    public function _empty($name)
    {
        echo $name.'控制器不存在';
        //$this->index();

    }

    public function index()
    {
        //判断是否调试模式
        if (config('app_debug') == false) {

            return '该功能只能调试模式下，开发人员使用';;
        }
        //要查询的数据库
        $dbname = config('database');
        $dbname = $dbname['database'];

        $seach = input('seach');


        if ($seach) {
            $where = " AND (`TABLE_NAME` regexp  '" . $seach . "' OR `TABLE_COMMENT` regexp  '" . $seach . "' )";
            $tables1 = Db::query('SELECT  TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema=\'' . $dbname . '\' AND COLUMN_NAME REGEXP \'' . $seach . '\'');
            if (!empty($tables1)) {
                $tableName = '';
                foreach ($tables1 as $value) {
                    $tableName .= '\'' . $value['TABLE_NAME'] . '\',';
                }

                $tableName = substr($tableName, 0, -1);
                $tables1 = Db::query('SELECT TABLE_NAME,TABLE_COMMENT FROM information_schema.TABLES WHERE table_schema=' . '\'' . $dbname . '\'' . ' AND `TABLE_NAME` in(' . $tableName . ')');
            }
        }

//INFORMATION_SCHEMA.COLUMNS  information_schema.TABLES  . ' OR `TABLE_COMMENT` LIKE ' . "'%" . $seach . "%' OR
        $tables = Db::query('SELECT TABLE_NAME,TABLE_COMMENT FROM information_schema.TABLES WHERE table_schema=' . '\'' . $dbname . '\'' . (isset($where) ? $where : ''));

        if (isset($tables1) && !empty($tables1)) {
            $tables = array_merge($tables, $tables1);
        }


        $txt = '';
        foreach ($tables as $key => &$value) {
            // $txt .= '*```(' . $value['TABLE_NAME'] . ')  注释(' . $value['TABLE_COMMENT'] . ')' . "\r\n";

            $arr = Db::query('SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=' . '\'' . $value['TABLE_NAME'] . '\' AND table_schema=' . '\'' . $dbname . '\'');
            $value['field'] = $arr;
            //            foreach ($arr as $v) {
//                $txt .= '                                      ' . $v['COLUMN_NAME'] . '(' . $v['COLUMN_TYPE'] . ')      默认值:' . $v['COLUMN_DEFAULT'] . '   注释:' . $v['COLUMN_COMMENT'] . "\r\n";
//            }
            // dump(M()->query(''));
            //$tablesmsg = M()->query('show columns from '.$value['Tables_in_zichan']);
            // dump($tablesmsg);
            // $txt .= '*******************************************************************************' . "\r\n";
        }

        $view = new View();
        $view->lists = $tables;
        $view->seach = $seach;
        return $view->fetch();

    }

    //联想功能
    public function getData()
    {
        //要查询的数据库
        $dbname = config('database');
        $dbname = $dbname['database'];
        $search = input('search');
        $type   = input('type',1);

        if ($search) {
            switch ($type){
                case 2:
                    $where = " AND (`TABLE_NAME` regexp  '" . $search . "' OR `TABLE_COMMENT` regexp  '" . $search . "' )";
                    $tables = Db::query('SELECT  *  FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema=\'' . $dbname . '\' AND COLUMN_NAME REGEXP \'' . $search . '\'');
                    break;
                case 1:
                    $where = " AND (`TABLE_NAME` regexp  '" . $search . "' OR `TABLE_COMMENT` regexp  '" . $search . "' )";
                    $tables = Db::query('SELECT  * FROM information_schema.TABLES WHERE table_schema=\'' . $dbname   . '\''.$where);

                    break;
                default:
                    $tables = [];
            }
            if(empty($tables)){
                return json(['code'=>1]);
            }else{
                return json(['code'=>0,'data'=>$tables]);
            }

        }else{
            return json(['code'=>1]);
        }
    }

    public function testHttp()
    {

        return $this->fetch();
    }

    public function getcallbackdata()
    {
        $data = input('request.');
        switch ($data['type']) {
            case 'GET':
                $r = doPost($data['url'], $data, [], 'GET');
                break;
            case 'POST':
                $r = doPost($data['url'], $data, [], 'POST');
                break;
        }

        echo '<pre>';
        var_dump($r);
        echo '<pre>';
    }

}
